package com.vip.CarLoanRegistation.app.controller;

import java.io.IOException;

import javax.imageio.spi.RegisterableService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.vip.CarLoanRegistation.app.model.AccountDetails;
import com.vip.CarLoanRegistation.app.model.Emi;
import com.vip.CarLoanRegistation.app.model.NonselfEmployee;
import com.vip.CarLoanRegistation.app.model.Profession;
import com.vip.CarLoanRegistation.app.model.RegistrationDetails;
import com.vip.CarLoanRegistation.app.model.SelfEmployee;
import com.vip.CarLoanRegistation.app.model.SpouseDetails;
import com.vip.CarLoanRegistation.app.service.Registrationservice;

@RestController
public class RegistrationController {
	
@Autowired
Registrationservice rs;

@PostMapping(value="/newcustomerregistration",consumes= org.springframework.http.MediaType.MULTIPART_FORM_DATA_VALUE)
public ResponseEntity<RegistrationDetails> saveData(
		
//		               SelfEmployee pojo files
//		@RequestParam ("selfempBlankcheque")MultipartFile f1,
//		@RequestParam ("selfempBankstatement")MultipartFile f2,
//		@RequestParam ("form16")MultipartFile f3,
//		@RequestParam ("selfempPhoto")MultipartFile f4,
//		@RequestParam ("selfempSignature")MultipartFile f5,
//		@RequestParam ("selfempDrivinglicence")MultipartFile f6,
		
//		                 NonSelfEmployee pojo files
		@RequestParam ("nonselfempBlankcheque")MultipartFile f7,
		@RequestParam ("nonselfempBankstatement")MultipartFile f8,
		@RequestParam ("nonselfeempIncomeproof")MultipartFile f9,
		@RequestParam ("nonselfempElectricitybill")MultipartFile f10,
		@RequestParam ("nonselfempAddressproof")MultipartFile f11,
		@RequestParam ("nonselfempPhoto")MultipartFile f12,
		@RequestParam ("nonselfempSignature")MultipartFile f13,
		
//		       RegistrationDetails pojo
//	    @RequestParam ("regId")String regId,
	    @RequestParam ("regDob")String regDob,
		@RequestParam ("regAge")String regAge,
		@RequestParam ("regGender")String regGender,
		@RequestParam ("regMobno")String regMobno,
		@RequestParam ("regOccopation")String regOccopation,
		
//		              Emi pojo
//		@RequestParam ("emiId")String emiId,
		@RequestParam ("emiAmount")String emiAmount,
		@RequestParam ("principalAmount")String principalAmount,
		@RequestParam ("interest")String interest,
		@RequestParam ("tenure")String tenure,
		
//		                SelfEmployee pojo
//		@RequestParam ("selfempId")String selfempId
		@RequestParam ("selfempName")String selfempName,
		@RequestParam ("selfempAge")String selfempAge,
		@RequestParam ("selfempCompanyName")String selfempCompanyName,
		@RequestParam ("selfempBusinessname")String selfempBusinessname,


//		           AccountDetails pojo
//		@RequestParam ("accId")String accId,
		@RequestParam ("accNo")String accNo,
		@RequestParam ("accName")String accName,
		@RequestParam ("bankName")String bankName,
		@RequestParam ("bankAddress")String bankAddress,
		@RequestParam ("ifscCode")String ifcCode,
		@RequestParam ("accType")String accType,
		
//		             NonselfEmployee pojo
//		@RequestParam ("nonselfempId")String nonselfempId,
		@RequestParam ("nonselfempAge")String nonselfempAge,
		@RequestParam ("nonselfempName")String nonselfempName,
		@RequestParam ("nonselfempOccopation")String nonselfempOccopation,
		
//		               SpouseDetails
//		@RequestParam ("spouseId")String spouseId,
		@RequestParam ("spouseName")String spouseName,
		@RequestParam ("spouseRelation")String spouseRelation,
		@RequestParam ("spouseDob")String spouseDob,
		@RequestParam ("spouseMobno")String spouseMobno)
		
		
//                  Profession pojo
//        @RequestParam ("proId")String proId,
//        @RequestParam ("selfEmployee")String selfEmployee,
//        @RequestParam ("NonselfEmployee")String NonselfEmployee)

		{
	
	ObjectMapper om=new ObjectMapper();
	RegistrationDetails rr=new RegistrationDetails();
	
	try {
//		Profession self = om.readValue(selfEmployee, Profession.class);
//		Profession non = om.readValue(NonselfEmployee, Profession.class);
//		
		
//		          RegistrationDetails pojo
//		RegistrationDetails readValue2 = om.readValue(regId, RegistrationDetails.class);
		RegistrationDetails readValue3 = om.readValue(regDob, RegistrationDetails.class);
		RegistrationDetails readValue4 = om.readValue(regAge, RegistrationDetails.class);
		RegistrationDetails readValue5 = om.readValue(regGender, RegistrationDetails.class);
		RegistrationDetails readValue6 = om.readValue(regMobno, RegistrationDetails.class);
		RegistrationDetails readValue7 = om.readValue(regOccopation, RegistrationDetails.class);
		
//		                Emi pojo
//		Emi readValue8 = om.readValue(emiId, Emi.class);
		Emi readValue = om.readValue(emiAmount,Emi.class);
		Emi readValue9 = om.readValue(principalAmount, Emi.class);
		Emi readValue10 = om.readValue(interest, Emi.class);
		Emi readValue11 = om.readValue(tenure, Emi.class);
		
//		             AccountDetails pojo
		AccountDetails readValue12 = om.readValue(accNo, AccountDetails.class);
//		AccountDetails readValue13 = om.readValue(accId, AccountDetails.class);
		AccountDetails readValue14 = om.readValue(accName, AccountDetails.class);
		AccountDetails readValue15 = om.readValue(bankName, AccountDetails.class);
		AccountDetails readValue16 = om.readValue(bankAddress, AccountDetails.class);
		AccountDetails readValue17 = om.readValue(ifcCode, AccountDetails.class);
		AccountDetails readValue18 = om.readValue(accType, AccountDetails.class);
		
//                         SpouseDetails
//		SpouseDetails readValue19 = om.readValue(spouseId, SpouseDetails.class);
		SpouseDetails readValue20 = om.readValue(spouseName, SpouseDetails.class);
		SpouseDetails readValue21 = om.readValue(spouseRelation, SpouseDetails.class);
		SpouseDetails readValue22 = om.readValue(spouseRelation, SpouseDetails.class);
		SpouseDetails readValue23 = om.readValue(spouseMobno, SpouseDetails.class);
		
//		                      SelfEmployee pojo        
//		SelfEmployee readValue24 = om.readValue(selfempId, SelfEmployee.class);
		SelfEmployee readValue25 = om.readValue(selfempName, SelfEmployee.class);
		SelfEmployee readValue26 = om.readValue(selfempAge, SelfEmployee.class);
		SelfEmployee readValue27 = om.readValue(selfempCompanyName, SelfEmployee.class);
		SelfEmployee readValue28 = om.readValue(selfempBusinessname, SelfEmployee.class);
		
//                            NonselfEmployee pojo
//		NonselfEmployee readValue29 = om.readValue(nselfempId, NonselfEmployee.class);
		NonselfEmployee readValue30 = om.readValue(nonselfempName, NonselfEmployee.class);
		NonselfEmployee readValue31 = om.readValue(nonselfempAge, NonselfEmployee.class);
		NonselfEmployee readValue32 = om.readValue(nonselfempOccopation, NonselfEmployee.class);
		
//		                     SelfEmployee pojo files
		rr.getRegProfession().getSelfEmployee().setSelfempBankstatement(f2.getBytes());
		rr.getRegProfession().getSelfEmployee().setSelfempBlankcheque(f1.getBytes());
		rr.getRegProfession().getSelfEmployee().setForm16(f3.getBytes());
		rr.getRegProfession().getSelfEmployee().setSelfempDrivinglicence(f6.getBytes());
		rr.getRegProfession().getSelfEmployee().setSelfempPhoto(f4.getBytes());
		rr.getRegProfession().getSelfEmployee().setSelfempSignature(f5.getBytes());
		
//		                    NonSelfEmployee pojo files
		rr.getRegProfession().getNonSelfEmployee().setNonselfempAddressproof(f11.getBytes());
		rr.getRegProfession().getNonSelfEmployee().setNonselfempBankstatement(f8.getBytes());
		rr.getRegProfession().getNonSelfEmployee().setNonselfempBlankcheque(f7.getBytes());
		rr.getRegProfession().getNonSelfEmployee().setNonselfempElectricitybill(f10.getBytes());
		rr.getRegProfession().getNonSelfEmployee().setNonselfempPhoto(f12.getBytes());
		rr.getRegProfession().getNonSelfEmployee().setNonselfempSignature(f13.getBytes());
		rr.getRegProfession().getNonSelfEmployee().setNonselfeempIncomeproof(f9.getBytes());
		
		rs.saveData(rr);
		
		
	} catch (IOException e) {
		// TODO Auto-generated catch bloc
		e.printStackTrace();
		
	}
	
	return new ResponseEntity<RegistrationDetails>(rr,HttpStatus.CREATED);
}	

@GetMapping(value="/viewRegistration")	
public ResponseEntity<Iterable<RegistrationDetails>> getData(){
	Iterable<RegistrationDetails>  list=rs.displayAllCustomerRegistration();
	return new ResponseEntity<Iterable<RegistrationDetails>>(list,HttpStatus.OK);
}

@PutMapping(value="/updatecustomerdetails/{regId}")	
public ResponseEntity<RegistrationDetails> updateData(@RequestBody RegistrationDetails r,@PathVariable ("regId") Integer regId) {
				
	RegistrationDetails updateregistration	=	rs.updateCustomerRegistration(r, regId);
	
	return new ResponseEntity<RegistrationDetails>(updateregistration,HttpStatus.ACCEPTED);
}

@DeleteMapping(value="/removeregistrationdetails/{regId}")
public ResponseEntity deleteData(@PathVariable ("regId") Integer regId)
		 {
	rs.removeregistrationdetails(regId);
	return new ResponseEntity(HttpStatus.NO_CONTENT);
}

}

